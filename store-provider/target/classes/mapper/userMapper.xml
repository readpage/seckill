<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace是用于绑定Dao接口的,不用写接口实现类,
mybatis会通过该绑定自动帮你找到对应要执行的SQL语句-->
<!-- parameterType(输入类型) resultType(输出类型)-->
<mapper namespace="com.example.mapper.UserMapper">
<!--    <resultMap > 标签：
        id属性 ，resultMap标签的标识。
        type属性 ，返回值的全限定类名，或类型别名。-->

<!--    id为主键映射
        property=需要映射到JavaBean 的属性名称。
        column=数据表的列名或者标签别名
        select=查询语句
         javaType=java实体中接受的集合类型
         oftype指定的是映射到list集合属性中POJO的类型-->
    <resultMap id="userMap" type="User">
        <id property="id" column="id"></id>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <collection property="roles" ofType="Role">
            <result property="name" column="name"/>
        </collection>
    </resultMap>
    <select id="findByUsername" resultMap="userMap">
        SELECT u.*, r.name
            FROM user u, user_role ur, role r
            WHERE u.id=ur.uid AND r.id=ur.rid
            AND u.username=#{username}
    </select>
    <select id="selectAll" resultMap="userMap">
        SELECT u.*, r.name
            FROM user u, user_role ur, role r
            WHERE u.id=ur.uid AND r.id=ur.rid
    </select>
    <select id="findByUsernameLike" parameterType="String" resultMap="userMap">
        SELECT * FROM user WHERE username LIKE concat('%',#{name},'%')
    </select>
    <insert id="add" parameterType="User">
        INSERT INTO user(username, password) VALUES(#{username}, #{password})
    </insert>
    <select id="findById" parameterType="Integer" resultMap="userMap">
         SELECT * FROM user WHERE id=#{id}
    </select>
    <update id="updateById" parameterType="User">
        UPDATE * FROM user SET username=#{username}, password=#{password}
        WHERE id=#{id}
    </update>
</mapper>